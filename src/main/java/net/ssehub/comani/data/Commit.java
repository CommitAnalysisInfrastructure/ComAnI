/*
 * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
 * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
package net.ssehub.comani.data;

import java.util.ArrayList;
import java.util.List;

/**
 * This class represents a commit of a version control system. Objects of this class act as containers for passing
 * information of single commits, like the date of the commit, the affected files, and the introduced changes, from
 * a commit extractor to a commit analyzer.
 * 
 * @author Christian Kroeher
 *
 */
public class Commit {
    
    /**
     * The id of this commit as generated by the version control system. Never <code>null</code>, but may be
     * <i>empty</i>.
     */
    private String id;
    
    /**
     * The date this commit was submitted to the version control system. Never <code>null</code>, but may be
     * <i>empty</i>.
     */
    private String date;
    
    /**
     * The header of this commit, which typically contains general information about this commit, like author name and
     * mail-address, full commit number, commit message, etc. Never <code>null</code>, but may be <i>empty</i>.
     */
    private String[] commitHeader;
    
    /**
     * The list of artifacts changed by this commit. Never <code>null</code>, but may be <i>empty</i>.
     */
    private List<ChangedArtifact> changedArtifacts;
    
    /**
     * Constructs a new and empty commit.
     */
    public Commit() {
        id = "";
        date = "";
        commitHeader = new String[0];
        changedArtifacts = new ArrayList<ChangedArtifact>();
    }
    
    /**
     * Constructs a new commit based on the given information.
     * 
     * @param id the id of this commit, e.g., as generated by the version control system; should never be
     *        <code>null</code>
     * @param date the date this commit was submitted to the version control system; should never be <code>null</code>
     * @param commitHeader the header of this commit containing general information, like author, commit message, etc.;
     *        should never be <code>null</code> 
     * @param changedArtifacts a list of {@link ChangedArtifact}s changed by this commit; can be <code>null</code>
     */
    public Commit(String id, String date, String[] commitHeader, List<ChangedArtifact> changedArtifacts) {
        if (id != null) {            
            this.id = id.trim();
        } else {
            this.id = "";
        }
        if (date != null) {
            this.date = date.trim();
        } else {
            this.date = "";
        }
        if (commitHeader != null) {            
            this.commitHeader = commitHeader;
        } else {
            this.commitHeader = new String[0];
        }
        if (changedArtifacts != null) {            
            this.changedArtifacts = changedArtifacts;
        } else {
            this.changedArtifacts = new ArrayList<ChangedArtifact>();
        }
    }
    
    /**
     * Adds the given string as the id to this {@link Commit}.
     * 
     * @param commitId the string representing the commit id; adding <code>null</code> is forbidden and yields no
     *        changes to the current id
     * 
     */
    public void addId(String commitId) {
        if (commitId != null) {            
            id = commitId;
        }
    }
    
    /**
     * Add the given string as the date of this {@link Commit}.
     * 
     * @param commitDate the string representing the commit date; adding <code>null</code> is forbidden and yields no
     *        changes to the current date
     */
    public void addDate(String commitDate) {
        if (commitDate != null) {
            date = commitDate;
        }
    }
    
    /**
     * Adds the given set of strings as the commit header of this {@link Commit}.
     * 
     * @param commitHeader the set of strings representing the commit header; adding <code>null</code> is forbidden and
     *        yields no changes to the current commit header
     */
    public void addCommitHeader(String[] commitHeader) {
        if (commitHeader != null) {
            this.commitHeader = commitHeader;
        }
    }
    
    /**
     * Adds the given {@link ChangedArtifact} to the list of changed artifacts of this {@link Commit}.
     * 
     * @param changedArtifact the changed artifact changed by this commit; adding <code>null</code> is forbidden and
     *        yields no changes to the current list of changes artifacts
     */
    public void addChangedArtifact(ChangedArtifact changedArtifact) {
        if (changedArtifact != null) {
            changedArtifacts.add(changedArtifact);
        }
    }
    
    /**
     * Returns the id of this commit.
     * 
     * @return the id of this commit, e.g., as generated by the version control system; never <code>null</code>, but may
     *         be <i>empty</i>
     */
    public String getId() {
        return id;
    }
    
    /**
     * Returns the date this commit was submitted.
     * 
     * @return the date this commit was submitted to the version control system; never <code>null</code>, but may be
     *         <i>empty</i>
     */
    public String getDate() {
        return date;
    }
    
    /**
     * Returns the header of this commit.
     * 
     * @return the header of this commit containing general information, like author, commit message, etc.; never
     *         <code>null</code>, but may be <i>empty</i>
     */
    public String[] getCommitHeader() {
        return commitHeader;
    }
    
    /**
     * Returns all artifacts changed by this commit.
     * 
     * @return a list of {@link ChangedArtifact}s changed by this commit; Never <code>null</code>, but may be
     *         <i>empty</i>
     */
    public List<ChangedArtifact> getChangedArtifacts() {
        return changedArtifacts;
    }
    
    /**
     * {@inheritDoc}
     */
    @Override
    public String toString() {
        String lineBreak = ""; // dynamically changed below depending on whether line break is necessary
        StringBuilder commitStringBuilder = new StringBuilder();
        if (!id.isEmpty()) {
            commitStringBuilder.append(id + "\n");
        }
        // First block/line: date (whatever date the specific extractor defined; the typically commit author or
        //                   committer date)
        if (!date.isEmpty()) {
            commitStringBuilder.append(date);
            lineBreak = "\n";
        }
        // Second block: commit header
        if (commitHeader.length > 0) {
            commitStringBuilder.append(lineBreak);
            commitStringBuilder.append(commitHeader[0]);
            lineBreak = "\n";
            for (int i = 1; i < commitHeader.length; i++) {
                commitStringBuilder.append(lineBreak);
                commitStringBuilder.append(commitHeader[i]);
            }
        }
        // Third block: changed artifacts
        if (!changedArtifacts.isEmpty()) {
            commitStringBuilder.append(lineBreak);
            commitStringBuilder.append(changedArtifacts.get(0).toString());
            lineBreak = "\n";
            for (int i = 1; i < changedArtifacts.size(); i++) {
                commitStringBuilder.append(lineBreak);
                commitStringBuilder.append(changedArtifacts.get(i).toString());
            }
        }
        return commitStringBuilder.toString();
    }
}
